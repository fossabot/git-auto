#!/bin/bash

feature_main() {
  # delegate arguments to the proper feature function.
  # globals:
  #   none
  # arguments:
  #   $1: name of the feature function excluding the preceding "feature_".
  # returns:
  #   none
  if ! declare -f -F "feature_${1-:usage}" > /dev/null; then
    feature_usage
    exit 1
  fi
  feature_${1} "${@:2}"
}

feature_finish() {
  # merge completed feature branch into master ensuring up-to-date with remote.
  # globals:
  #   none
  # arguments:
  #   $1: name of the feature branch to finish.
  #   $2: optional name of remote repository to pull from.
  # returns: 
  #   none
  if [[ ${#} < 1 ]]; then
    feature_usage
    exit 1
  fi
  local branch="feature/${1}"
  local remote="${2:-origin}"

  # ensure local branch is up-to-date with remote before finish.
  if git ls-remote "${remote}" | grep "refs/heads/${branch}"; then
    feature_pull "${1}"
    feature_push "${1}"
  fi

  git checkout master
  git merge --no-ff "${branch}" -m "finish ${branch}"
}

feature_pull() {
  # pull local feature branch from remote repository
  # globals:
  #   none
  # arguments:
  #   $1: name of the feature branch to pull
  #   $2: optional name of remote repository to pull from
  # returns: 
  #   none
  local branch="feature/${1}"
  local remote="${2:-origin}"
  if [[ ${#} < 1 ]]; then
    feature_usage
    exit 1
  fi
  git fetch "${remote}"
  git checkout "${branch}"
  git pull "${remote}" "${branch}"
}

feature_push() {
  # push local feature branch to remote repository
  # globals:
  #   none
  # arguments:
  #   $1: name of the feature branch to push
  #   $2: optional name of remote repository to push to
  # returns: 
  #   none
  local branch="feature/${1}"
  local remote="${2:-origin}"
  if [[ ${#} < 1 ]]; then
    feature_usage
    exit 1
  fi
  git checkout "${branch}"
  git push --set-upstream "${remote}" "${branch}"
}

feature_start() {
  # create new feature branch based off of head of master.
  # globals:
  #   none.
  # arguments:
  #   $1: name of the feature branch to create.
  # returns: 
  #   none.
  git checkout -b "${1}" master
}

feature_usage() {
  # print out the usage instructions for git auto feature
  # globals:
  #   none
  # arguments:
  #   none
  # returns:
  #   none
  echo "usage: git auto feature <command> <arg>"
  echo ""
  echo "where available options for <command> are:"
  echo "  finish: merge feature branch named <arg> into master and delete it"
  echo "  pull:   pull feature branch named <arg> from origin"
  echo "  push:   push feature branch named <arg> to origin"
  echo "  start:  create new feature branch named <arg>"
  echo ""
  echo "for more command details run 'git auto <command>'"
}

