#! /bin/bash
#
# TODO(mraxilus): document header

patch_main() {
  # TODO(mraxilus): document patch_main
  if ! declare -f -F "patch_${1}" > /dev/null; then
    patch_usage
    exit 1
  fi
  patch_${1} "${@:2}"
}

patch_usage() {
  # TODO(mraxilus): document patch_usage
  echo "usage: git auto patch <command> <arg>"
  echo ""
  echo "where available options for <command> are:"
  echo "  finish:  merge patch branch named <arg> into master, delete it, and"
  echo "           create a new minor release"
  echo "  publish: push patch branch named <arg> to origin"
  echo "  start:   create new patch branch named <arg>"
  echo ""
  echo "for more command details run 'git auto <command> help'"
}

patch_finish() {
  # TODO(mraxilus): document patch_finish
  local branch="$(git branch | sed -n "s/.*\(patch\/.*\)/\1/p")"
  local version="$(echo ${branch} | sed "s/patch\///")"

  # merge into release
  git checkout release
  git merge --no-ff "${branch}"

  # add tag if nonexistant
  if [[ "$(git tag -l | grep ${version})" != "${version}" ]]; then
    git tag -a "${version}"
  fi

  # merge into master
  git checkout master
  git merge --no-ff "${branch}"
  git branch -d "${branch}"
}

patch_publish() {
  # TODO(mraxilus): implement patch publishing
  echo "patch_publish unimplemented"
}

patch_start() {
  # TODO(mraxilus): document patch_start
  local major="$(git auto version show major)"
  local minor="$(git auto version show minor)"
  local version="${major}.$((${minor} + 1)).0"
  git checkout -qb "patch/${version}" release
}
