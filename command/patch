#! /bin/bash
#
# patch

patch_main() {
  # delegate arguments to the proper patch function
  # globals:
  #   none
  # arguments:
  #   $1: name of the patch function excluding the preceeding "patch_"
  # returns:
  #   none
  if ! declare -f -F "patch_${1}" > /dev/null; then
    patch_usage
    exit 1
  fi
  patch_${1} "${@:2}"
}

patch_finish() {
  # merge completed patch branch into release and master
  # globals:
  #   none
  # arguments:
  #   $1: name of the patch branch to finish
  # returns: 
  #   none
  local branch="$(git branch \
    | sed -n "s/.*\(patch\/.*\)/\1/p" \
    | sed -r "s:\x1B\[[0-9;]*[mK]::g" )"
  local version="$(echo ${branch} | sed "s/patch\///")"

  # TODO(mraxilus): run all tests on patch branch before patching

  # merge into release
  git checkout release
  git merge --no-ff "${branch}" -m "apply patch/${version}"

  git auto version bump minor "apply patch to release"

  # merge into master
  git checkout master
  git merge --no-ff "${branch}" -m "apply patch/${version}"
  #git branch -d "${branch}"
}

patch_publish() {
  # TODO(mraxilus): implement patch publishing
  echo "patch_publish unimplemented"
}

patch_start() {
  # create new patch branch based off of head of release
  # globals:
  #   none
  # arguments:
  #   none
  # returns: 
  #   none
  local major="$(git auto version show major)"
  local minor="$(git auto version show minor)"
  local version="${major}.$((${minor} + 1)).0"
  git checkout -qb "patch/${version}" release
}

patch_usage() {
  # print out the usage instructions for git auto patch
  # globals:
  #   none
  # arguments:
  #   none
  # returns:
  #   none
  echo "usage: git auto patch <command> <arg>"
  echo ""
  echo "where available options for <command> are:"
  echo "  finish:  merge patch branch named <arg> into master, delete it, and"
  echo "           create a new minor release"
  echo "  publish: push patch branch named <arg> to origin"
  echo "  start:   create new patch branch named <arg>"
  echo ""
  echo "for more command details run 'git auto <command> help'"
}
